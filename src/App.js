import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import ImageGrid from './components/ImageGrid';
import SearchBar from './components/SearchBar';
import SidePanel from './components/SidePanel';
import StatusBar from './components/StatusBar';
import ImageUploader from './components/ImageUploader';
import SearchScopeDialog from './components/SearchScopeDialog';
import MonitoringDashboard from './components/MonitoringDashboard';
import ProjectMonitoringDashboard from './components/ProjectMonitoringDashboard';

function App() {
  const [images, setImages] = useState([]);
  const [filteredImages, setFilteredImages] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);
  const [loading, setLoading] = useState(true); // true olarak ba≈ülat
  const [stats, setStats] = useState({ total: 0, indexed: 0 });
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [viewMode, setViewMode] = useState('grid'); // grid, list, masonry
  const [showUploader, setShowUploader] = useState(false);
  const [searchScopeOpen, setSearchScopeOpen] = useState(false);
  const [searchImage, setSearchImage] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [imagesPerPage] = useState(100);
  const [searchTerm, setSearchTerm] = useState('');
  const [showMonitoring, setShowMonitoring] = useState(false);
  const [monitoringMode, setMonitoringMode] = useState('system'); // 'system' veya 'project'
  
  useEffect(() => {
    // Component mount olduƒüunda verileri y√ºkle
    initializeApp();
  }, []);

  const initializeApp = async () => {
    try {
      setLoading(true);
      
      // Sadece istatistikleri y√ºkle, g√∂rselleri y√ºkleme
      const statsResult = await window.electronAPI.getStatistics();
      if (statsResult.success) {
        setStats({
          total: statsResult.stats.total_images || 0,
          indexed: statsResult.stats.active_images || 0,
          active: statsResult.stats.active_images || 0
        });
      }
      
      // G√∂rselleri bo≈ü bƒ±rak - sadece arama sonu√ßlarƒ±nda g√∂ster
      setImages([]);
      setFilteredImages([]);
      
      console.log('‚úÖ Uygulama ba≈ülatƒ±ldƒ± - G√∂rseller sadece arama sonu√ßlarƒ±nda g√∂sterilecek');
      
    } catch (error) {
      console.error('Uygulama ba≈ülatma hatasƒ±:', error);
    } finally {
      setLoading(false);
    }
  };



  const handleSearch = async (searchTerm) => {
    console.log('üîÑ handleSearch √ßaƒürƒ±ldƒ±, searchTerm:', searchTerm);
    setSearchTerm(searchTerm); // State'i g√ºncelle
    
    if (!searchTerm || searchTerm.trim() === '') {
      console.log('‚ö†Ô∏è Bo≈ü arama terimi, g√∂rselleri temizliyorum');
      // Arama temizlendi - g√∂rselleri temizle
      setFilteredImages([]);
      return;
    }
    
    try {
      console.log('üîÑ Loading state true yapƒ±lƒ±yor');
      setLoading(true);
      console.log('üîç Metin aramasƒ± ba≈ülatƒ±lƒ±yor:', searchTerm);
      
      // Veritabanƒ±nda arama yap
      console.log('üîÑ window.electronAPI.searchByText √ßaƒürƒ±lƒ±yor...');
      const searchResult = await window.electronAPI.searchByText(searchTerm);
      console.log('üìä searchByText sonucu:', searchResult);
      
      if (searchResult.success) {
        console.log(`‚úÖ ${searchResult.images.length} sonu√ß bulundu`);
        console.log('üîç Bulunan g√∂rseller:', searchResult.images.map(img => ({
          filename: img.filename,
          hasThumbnail: !!img.thumbnail,
          thumbnailLength: img.thumbnail ? img.thumbnail.length : 0
        })));
        setFilteredImages(searchResult.images);
        console.log('‚úÖ filteredImages state g√ºncellendi');
      } else {
        console.error('‚ùå Arama hatasƒ±:', searchResult.error);
        setFilteredImages([]);
      }
      
    } catch (error) {
      console.error('‚ùå Arama hatasƒ±:', error);
      setFilteredImages([]);
    } finally {
      console.log('üîÑ Loading state false yapƒ±lƒ±yor');
      setLoading(false);
    }
  };

  const handleImageSearch = async (imageData) => {
    if (!imageData) {
      // G√∂rsel temizlendi
      setSelectedImage(null);
      setFilteredImages(images);
      return;
    }

    try {
      console.log('üîç G√∂rsel arama ba≈ülatƒ±lƒ±yor...', imageData);
      
      // Direkt disk se√ßme modalƒ±nƒ± a√ß
      setSearchImage(imageData);
      setSearchScopeOpen(true);
      
    } catch (error) {
      console.error('‚ùå G√∂rsel arama hatasƒ±:', error);
      alert('Arama sƒ±rasƒ±nda hata olu≈ütu: ' + error.message);
    }
  };

  const handleSearchScopeConfirm = async (result) => {
    try {
      setLoading(true);
      setSearchScopeOpen(false);
      
      if (result.success) {
        console.log('‚úÖ Arama tamamlandƒ±:', result.count, 'sonu√ß');
        console.log('üîç Aranan diskler:', result.searchedDrives);
        setFilteredImages(result.images);
        setCurrentPage(1);
        setTotalPages(Math.ceil(result.count / imagesPerPage));
      } else {
        console.error('‚ùå Arama hatasƒ±:', result.error);
        alert('Arama sƒ±rasƒ±nda hata olu≈ütu: ' + result.error);
      }
    } catch (error) {
      console.error('‚ùå Arama sonucu i≈üleme hatasƒ±:', error);
      alert('Arama sonucu i≈ülenirken hata olu≈ütu: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleImageSelect = async (image) => {
    setSelectedImage(image);
    setSidebarOpen(true);
    
    // Benzer g√∂rselleri bul (varsayƒ±lan threshold: 0.8)
    try {
      const similar = await window.electronAPI.searchSimilarFromDb({
        imagePath: image.filepath,
        threshold: 0.8
      });
      if (similar.success) {
        setSelectedImage({ ...image, similar: similar.results });
      }
    } catch (error) {
      console.error('Benzer g√∂rsel arama hatasƒ±:', error);
    }
  };

  const handleScan = async () => {
    setLoading(true);
    setSidebarOpen(true);
    
    try {
      console.log('üîç Akƒ±llƒ± tarama ba≈ülatƒ±lƒ±yor...');
      
      // Mevcut diskleri al
      const drivesResult = await window.electronAPI.listDrives();
      if (!drivesResult.success) {
        throw new Error('Diskler alƒ±namadƒ±');
      }
      
      const drives = drivesResult.drives.map(d => d.letter);
      console.log('üíø Taranacak diskler:', drives);
      
      // Akƒ±llƒ± taramayƒ± ba≈ülat
      const result = await window.electronAPI.scanDrives({
        drives,
        scanMode: 'smart' // Akƒ±llƒ± tarama modu
      });
      
      if (result.success) {
        if (result.skipped) {
          console.log('‚úÖ Tarama atlandƒ±:', result.reason);
          alert(`Tarama atlandƒ±: ${result.reason === 'up_to_date' ? 'Veritabanƒ± g√ºncel' : result.reason}`);
        } else {
          console.log('‚úÖ Tarama tamamlandƒ±:', result.totalStats);
          alert(`Tarama tamamlandƒ±!\nYeni: ${result.totalStats.newFiles}\nG√ºncellenen: ${result.totalStats.updatedFiles}\nSilinen: ${result.totalStats.deletedFiles}`);
        }
        
        // G√∂rselleri yeniden y√ºkle
        await initializeApp();
      } else {
        throw new Error(result.error);
      }
      
    } catch (error) {
      console.error('‚ùå Tarama hatasƒ±:', error);
      alert('Tarama sƒ±rasƒ±nda hata olu≈ütu: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleImagesAdded = (newImages) => {
    console.log('üîÑ handleImagesAdded √ßaƒürƒ±ldƒ±:', newImages);
    
    if (newImages && Array.isArray(newImages) && newImages.length > 0) {
      console.log('‚úÖ Ge√ßerli g√∂rseller alƒ±ndƒ±, sayƒ±:', newImages.length);
      
      // Eklenen ilk g√∂rselin adƒ±nƒ± otomatik olarak arama √ßubuƒüuna yaz ve arama fonksiyonunu tetikle
      const firstImage = newImages[0];
      console.log('üîç ƒ∞lk g√∂rsel:', firstImage);
      
      if (firstImage && firstImage.filename) {
        console.log('üîç Eklenen g√∂rsel i√ßin otomatik arama ba≈ülatƒ±lƒ±yor:', firstImage.filename);
        setSearchTerm(firstImage.filename); // State'i g√ºncelle
        console.log('‚úÖ searchTerm state g√ºncellendi:', firstImage.filename);
        
        // Arama fonksiyonunu √ßaƒüƒ±r
        console.log('üîÑ handleSearch fonksiyonu √ßaƒürƒ±lƒ±yor...');
        handleSearch(firstImage.filename); // Arama fonksiyonunu √ßaƒüƒ±r
        console.log('‚úÖ handleSearch fonksiyonu √ßaƒürƒ±ldƒ±');
      } else {
        console.warn('‚ö†Ô∏è ƒ∞lk g√∂rselde filename yok:', firstImage);
      }
      
      setImages(prev => [...newImages, ...prev]);
      setFilteredImages(prev => [...newImages, ...prev]);
      console.log('‚úÖ State g√ºncellemeleri tamamlandƒ±');
      
      // ƒ∞statistikleri g√ºncelle
      initializeApp();
    } else {
      console.warn('‚ö†Ô∏è Ge√ßersiz g√∂rsel verisi:', newImages);
    }
  };

  return (
    <div className="app">
      {showMonitoring ? (
        monitoringMode === 'project' ? (
          <ProjectMonitoringDashboard />
        ) : (
          <MonitoringDashboard />
        )
      ) : (
        <>
          <div className="main-content">
            <SearchBar 
              onSearch={handleSearch}
              onScan={handleScan}
              viewMode={viewMode}
              onViewModeChange={setViewMode}
              onImageSearch={handleImageSearch}
              searchTerm={searchTerm}
              onMonitoringToggle={() => setShowMonitoring(true)}
              onProjectMonitoringToggle={() => {
                setMonitoringMode('project');
                setShowMonitoring(true);
              }}
            />
            
            <ImageGrid 
              images={filteredImages}
              onImageSelect={handleImageSelect}
              viewMode={viewMode}
              loading={loading}
              onUpload={() => setShowUploader(true)}
            />
          </div>

          <SidePanel 
            isOpen={sidebarOpen}
            onClose={() => setSidebarOpen(false)}
            selectedImage={selectedImage}
            onScanComplete={() => {
              initializeApp();
            }}
            onImageUpdate={(updatedImage) => {
              setSelectedImage(updatedImage);
            }}
          />

          <StatusBar stats={stats} />

          {showUploader && (
            <ImageUploader
              onImagesAdded={handleImagesAdded}
              onClose={() => setShowUploader(false)}
            />
          )}

          <SearchScopeDialog
            isOpen={searchScopeOpen}
            onClose={() => setSearchScopeOpen(false)}
            onConfirm={handleSearchScopeConfirm}
            searchImage={searchImage}
          />
        </>
      )}
      
      {/* Monitoring Dashboard'dan geri d√∂n√º≈ü butonu */}
      {showMonitoring && (
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          zIndex: 1000,
          display: 'flex',
          gap: '10px'
        }}>
          <button 
            className="monitoring-back-btn"
            onClick={() => {
              setShowMonitoring(false);
              setMonitoringMode('system');
            }}
            style={{
              padding: '10px 20px',
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer',
              fontSize: '14px'
            }}
          >
            ‚Üê Ana Sayfaya D√∂n
          </button>
          
          <button 
            className="monitoring-switch-btn"
            onClick={() => setMonitoringMode(monitoringMode === 'system' ? 'project' : 'system')}
            style={{
              padding: '10px 20px',
              backgroundColor: monitoringMode === 'system' ? '#28a745' : '#ffc107',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer',
              fontSize: '14px'
            }}
          >
            {monitoringMode === 'system' ? 'üèóÔ∏è Proje Modu' : 'üìä Sistem Modu'}
          </button>
        </div>
      )}
    </div>
  );
}

export default App; 
