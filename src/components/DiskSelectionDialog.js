import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import './DiskSelectionDialog.css';

/**
 * DiskSelectionDialog
 * Kullanƒ±cƒ±ya bilgisayardaki t√ºm diskleri g√∂sterir ve se√ßilen diskleri tarar
 */
function DiskSelectionDialog({ isOpen, onClose, onScanComplete }) {
  const [drives, setDrives] = useState([]);
  const [selectedDrives, setSelectedDrives] = useState([]);
  const [scanning, setScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState({ current: 0, total: 0, currentFile: '' });
  const [loading, setLoading] = useState(false);

  // Diskleri y√ºkle
  useEffect(() => {
    if (!isOpen) return;
    
    async function loadDrives() {
      setLoading(true);
      try {
        if (window.electronAPI?.listDrives) {
          const result = await window.electronAPI.listDrives();
          if (result.success) {
            setDrives(result.drives);
            // Varsayƒ±lan olarak t√ºm diskleri se√ß
            setSelectedDrives(result.drives);
          }
        }
      } catch (error) {
        console.error('Disk listesi y√ºklenemedi:', error);
      } finally {
        setLoading(false);
      }
    }

    loadDrives();
  }, [isOpen]);

  // Tarama ilerlemesini dinle
  useEffect(() => {
    if (!window.electronAPI) return;

    const handleScanProgress = (progress) => {
      setScanProgress(progress);
    };

    const handleScanComplete = (results) => {
      setScanning(false);
      console.log('‚úÖ Disk tarama tamamlandƒ±, ≈üimdi arama yapƒ±lacak:', results);
      
      // Tarama sonu√ßlarƒ±nƒ± g√∂ster ve arama yap
      if (results && results.processed > 0) {
        // √ñnce tarama tamamlandƒ± mesajƒ±nƒ± g√∂ster
        alert(`üéâ Tarama tamamlandƒ±!\n\n${results.processed} g√∂rsel i≈ülendi ve veritabanƒ±na eklendi.\n\n≈ûimdi benzer g√∂rseller aranacak...`);
        
        // Sonra arama yap
        setTimeout(() => {
          onScanComplete(results);
        }, 1000);
      } else {
        alert('‚ö†Ô∏è Tarama tamamlandƒ± ancak i≈ülenen g√∂rsel bulunamadƒ±.');
        onClose();
      }
    };

    window.electronAPI.onScanProgress(handleScanProgress);
    window.electronAPI.onScanComplete(handleScanComplete);

    return () => {
      window.electronAPI.removeScanProgress(handleScanProgress);
      window.electronAPI.removeScanComplete(handleScanComplete);
    };
  }, [onScanComplete, onClose]);

  const toggleDrive = (drive) => {
    setSelectedDrives((prev) => {
      if (prev.includes(drive)) {
        return prev.filter((d) => d !== drive);
      }
      return [...prev, drive];
    });
  };

  const toggleAllDrives = () => {
    if (selectedDrives.length === drives.length) {
      setSelectedDrives([]);
    } else {
      setSelectedDrives([...drives]);
    }
  };

  const handleStartScan = async () => {
    if (selectedDrives.length === 0) {
      alert('L√ºtfen en az bir disk se√ßin!');
      return;
    }

    setScanning(true);
    try {
      if (window.electronAPI?.scanDrives) {
        await window.electronAPI.scanDrives(selectedDrives);
      }
    } catch (error) {
      console.error('Tarama ba≈ülatƒ±lamadƒ±:', error);
      setScanning(false);
      alert('Tarama ba≈ülatƒ±lamadƒ±: ' + error.message);
    }
  };

  const handleCancel = () => {
    if (scanning) {
      if (window.electronAPI?.cancelScan) {
        window.electronAPI.cancelScan();
      }
      setScanning(false);
    } else {
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="disk-selection-backdrop">
      <div className="disk-selection-modal">
        <div className="disk-selection-header">
          <h2>üîç Arama Kapsamƒ±</h2>
          <button className="close-btn" onClick={handleCancel} disabled={scanning}>
            ‚úï
          </button>
        </div>

        {loading ? (
          <div className="loading-section">
            <div className="loading-spinner"></div>
            <p>Diskler y√ºkleniyor...</p>
          </div>
        ) : scanning ? (
          <div className="scanning-section">
            <div className="scan-progress">
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ 
                    width: scanProgress.total > 0 ? `${(scanProgress.current / scanProgress.total) * 100}%` : '0%' 
                  }}
                ></div>
              </div>
              <div className="progress-text">
                {scanProgress.current} / {scanProgress.total} g√∂rsel i≈ülendi
              </div>
              {scanProgress.currentFile && (
                <div className="current-file">
                  ≈ûu an: {scanProgress.currentFile.split('\\').pop() || scanProgress.currentFile.split('/').pop()}
                </div>
              )}
            </div>
            <button className="cancel-scan-btn" onClick={handleCancel}>
              ‚ùå Taramayƒ± ƒ∞ptal Et
            </button>
          </div>
        ) : (
          <>
            <div className="disk-selection-content">
              <p className="disk-selection-description">
                Benzer g√∂rselleri bulmak i√ßin taranacak diskleri se√ßin. 
                Se√ßilen disklerdeki t√ºm g√∂rseller otomatik olarak i≈ülenecek, veritabanƒ±na eklenecek ve ardƒ±ndan arama yapƒ±lacak.
              </p>

              <div className="disk-selection-controls">
                <button 
                  className="select-all-btn" 
                  onClick={toggleAllDrives}
                  disabled={drives.length === 0}
                >
                  {selectedDrives.length === drives.length ? '‚ùå T√ºm√ºn√º Kaldƒ±r' : '‚úÖ T√ºm√ºn√º Se√ß'}
                </button>
              </div>

              <div className="disk-list">
                {drives.map((drive) => (
                  <label key={drive} className="disk-item">
                    <input 
                      type="checkbox" 
                      checked={selectedDrives.includes(drive)} 
                      onChange={() => toggleDrive(drive)}
                      disabled={scanning}
                    />
                    <span className="disk-icon">üíæ</span>
                    <span className="disk-name">{drive}</span>
                    <span className="disk-info">Yerel Disk</span>
                  </label>
                ))}
                {drives.length === 0 && (
                  <p className="no-drives">Disk bulunamadƒ±...</p>
                )}
              </div>

              <div className="disk-selection-summary">
                <p>
                  <strong>{selectedDrives.length}</strong> disk se√ßildi
                  {selectedDrives.length > 0 && (
                    <span>: {selectedDrives.join(', ')}</span>
                  )}
                </p>
              </div>
            </div>

            <div className="disk-selection-actions">
              <button 
                className="start-scan-btn" 
                onClick={handleStartScan}
                disabled={selectedDrives.length === 0}
              >
                üöÄ Taramayƒ± Ba≈ülat ve Ara
              </button>
              <button className="cancel-btn" onClick={handleCancel}>
                ƒ∞ptal
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
}

DiskSelectionDialog.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onScanComplete: PropTypes.func.isRequired
};

export default DiskSelectionDialog; 