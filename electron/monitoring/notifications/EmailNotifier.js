/**
 * Email Notifier
 * Send notifications via email
 */

const logger = require('../utils/logger');
const helpers = require('../utils/helpers');

class EmailNotifier {
  constructor(config) {
    this.config = config;
    this.smtp = config.smtp;
    this.from = config.from || 'monitoring@company.com';
    this.to = config.to || [];
    this.subject = config.subject || 'Enterprise Monitoring Alert';
    
    if (!this.smtp) {
      throw new Error('SMTP configuration is required');
    }
    
    if (!this.to || this.to.length === 0) {
      throw new Error('Email recipients are required');
    }
  }

  /**
   * Send notification via email
   */
  async send(alert) {
    try {
      const message = this.formatMessage(alert);
      
      // Note: In a real implementation, you would use a library like nodemailer
      // For now, we'll simulate the email sending
      logger.info('Email notification prepared', {
        alert: alert.name,
        severity: alert.severity,
        to: this.to,
        subject: message.subject
      });
      
      // Simulate email sending
      await this.simulateEmailSend(message);
      
      logger.info('Email notification sent', {
        alert: alert.name,
        severity: alert.severity,
        to: this.to
      });
      
      return true;
    } catch (error) {
      logger.error('Failed to send email notification:', error);
      throw error;
    }
  }

  /**
   * Format alert message for email
   */
  formatMessage(alert) {
    const severity = alert.severity.toUpperCase();
    const timestamp = helpers.formatTimestamp(alert.timestamp);
    
    const subject = `${this.subject} - ${severity}: ${alert.name}`;
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Monitoring Alert</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .alert { border: 2px solid #ccc; padding: 15px; margin: 10px 0; }
          .critical { border-color: #ff0000; background-color: #fff5f5; }
          .error { border-color: #ff6b6b; background-color: #fff8f8; }
          .warning { border-color: #ffa500; background-color: #fffbf0; }
          .info { border-color: #4ecdc4; background-color: #f0fffd; }
          .success { border-color: #2ecc71; background-color: #f0fff4; }
          .field { margin: 10px 0; }
          .field-name { font-weight: bold; }
          .metric { background-color: #f8f9fa; padding: 5px; margin: 2px 0; }
        </style>
      </head>
      <body>
        <h2>ðŸš¨ Monitoring Alert</h2>
        
        <div class="alert ${alert.severity}">
          <h3>${alert.name}</h3>
          <p><strong>Message:</strong> ${alert.message}</p>
          
          <div class="field">
            <span class="field-name">Severity:</span> ${severity}
          </div>
          
          <div class="field">
            <span class="field-name">Timestamp:</span> ${timestamp}
          </div>
          
          ${this.formatMetrics(alert.metrics)}
          ${this.formatTags(alert.tags)}
        </div>
        
        <hr>
        <p><em>This alert was generated by Enterprise Monitoring System</em></p>
      </body>
      </html>
    `;
    
    const text = `
Monitoring Alert

Alert: ${alert.name}
Message: ${alert.message}
Severity: ${severity}
Timestamp: ${timestamp}

${this.formatMetricsText(alert.metrics)}
${this.formatTagsText(alert.tags)}

---
Enterprise Monitoring System
    `;
    
    return {
      from: this.from,
      to: this.to,
      subject: subject,
      html: html,
      text: text
    };
  }

  /**
   * Format metrics for HTML
   */
  formatMetrics(metrics) {
    if (!metrics || Object.keys(metrics).length === 0) {
      return '';
    }
    
    let html = '<div class="field"><span class="field-name">Metrics:</span><br>';
    
    for (const [name, value] of Object.entries(metrics)) {
      const valueStr = typeof value === 'object' ? JSON.stringify(value) : String(value);
      html += `<div class="metric"><strong>${name}:</strong> ${valueStr}</div>`;
    }
    
    html += '</div>';
    return html;
  }

  /**
   * Format metrics for text
   */
  formatMetricsText(metrics) {
    if (!metrics || Object.keys(metrics).length === 0) {
      return '';
    }
    
    let text = 'Metrics:\n';
    
    for (const [name, value] of Object.entries(metrics)) {
      const valueStr = typeof value === 'object' ? JSON.stringify(value) : String(value);
      text += `  ${name}: ${valueStr}\n`;
    }
    
    return text;
  }

  /**
   * Format tags for HTML
   */
  formatTags(tags) {
    if (!tags || Object.keys(tags).length === 0) {
      return '';
    }
    
    const tagList = Object.entries(tags)
      .map(([key, value]) => `${key}: ${value}`)
      .join(', ');
    
    return `<div class="field"><span class="field-name">Tags:</span> ${tagList}</div>`;
  }

  /**
   * Format tags for text
   */
  formatTagsText(tags) {
    if (!tags || Object.keys(tags).length === 0) {
      return '';
    }
    
    const tagList = Object.entries(tags)
      .map(([key, value]) => `${key}: ${value}`)
      .join(', ');
    
    return `Tags: ${tagList}\n`;
  }

  /**
   * Simulate email sending
   */
  async simulateEmailSend(message) {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Log the email content for debugging
    logger.debug('Email content:', {
      to: message.to,
      subject: message.subject,
      textLength: message.text.length,
      htmlLength: message.html.length
    });
  }

  /**
   * Test notification
   */
  async test() {
    const testAlert = {
      name: 'test_alert',
      message: 'This is a test notification from Enterprise Monitoring',
      severity: 'info',
      timestamp: Date.now(),
      metrics: {
        test_metric: 42,
        cpu_usage: 75.5
      },
      tags: {
        test: true,
        source: 'email_notifier',
        environment: 'development'
      }
    };
    
    return await this.send(testAlert);
  }

  /**
   * Get notifier status
   */
  getStatus() {
    return {
      type: 'email',
      enabled: !!this.smtp,
      from: this.from,
      to: this.to,
      subject: this.subject
    };
  }
}

module.exports = EmailNotifier; 